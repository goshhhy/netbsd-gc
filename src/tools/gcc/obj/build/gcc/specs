*asm:
%(asm_cpu) %{,assembler|,assembler-with-cpp: %{mregnames} %{mno-regnames}} %{mrelocatable} %{mrelocatable-lib} %{fpie|fPIE|fpic|fPIC:-K PIC} %{memb|msdata=eabi: -memb}%{mlittle|mlittle-endian: -mlittle;mbig|mbig-endian: -mbig;mcall-i960-old: -mlittle;: -mbig}

*asm_debug:
%{!g0:%{gstabs*:--gstabs}%{!gstabs*:%{g*:--gdwarf2}}} %{fdebug-prefix-map=*:--debug-prefix-map %*}

*asm_final:
%{gsplit-dwarf: 
       objcopy --extract-dwo 	 %{c:%{o*:%*}%{!o*:%b%O}}%{!c:%U%O} 	 %{c:%{o*:%:replace-extension(%{o*:%*} .dwo)}%{!o*:%b.dwo}}%{!c:%b.dwo} 
       objcopy --strip-dwo 	 %{c:%{o*:%*}%{!o*:%b%O}}%{!c:%U%O}     }

*asm_options:
%{-target-help:%:print-asm-header()} %{v} %{w:-W} %{I*}  %{gz*:%e-gz is not supported in this configuration} %a %Y %{c:%W{o*}%{!o*:-o %w%b%O}}%{!c:-o %d%w%u%O}

*invoke_as:
%{!fwpa*:   %{fcompare-debug=*|fdump-final-insns=*:%:compare-debug-dump-opt()}   %{!S:-o %|.s |
 as %(asm_options) %m.s %A }  }

*cpp:
%{posix:-D_POSIX_SOURCE}    %{pthread:-D_REENTRANT -D_PTHREADS}

*cpp_options:
%(cpp_unique_options) %1 %{m*} %{std*&ansi&trigraphs} %{W*&pedantic*} %{w} %{f*} %{g*:%{!g0:%{g*} %{!fno-working-directory:-fworking-directory}}} %{O*} %{undef} %{save-temps*:-fpch-preprocess}

*cpp_debug_options:
%{d*}

*cpp_unique_options:
%{!Q:-quiet} %{nostdinc*} %{C} %{CC} %{v} %{I*&F*} %{P} %I %{MD:-MD %{!o:%b.d}%{o*:%.d%*}} %{MMD:-MMD %{!o:%b.d}%{o*:%.d%*}} %{M} %{MM} %{MF*} %{MG} %{MP} %{MQ*} %{MT*} %{!E:%{!M:%{!MM:%{!MT:%{!MQ:%{MD|MMD:%{o*:-MQ %*}}}}}}} %{remap} %{g3|ggdb3|gstabs3|gcoff3|gxcoff3|gvms3:-dD} %{!iplugindir*:%{fplugin*:%:find-plugindir()}} %{H} %C %{D*&U*&A*} %{i*} %Z %i %{E|M|MM:%W{o*}}

*trad_capable_cpp:
cc1 -E %{traditional|traditional-cpp:-traditional-cpp}

*cc1:
%{G*} %(cc1_cpu)%{meabi: %{!mcall-*: -mcall-sysv }} %{!meabi: %{!mno-eabi:     %{mrelocatable: -meabi }     %{mcall-freebsd: -mno-eabi }     %{mcall-i960-old: -meabi }     %{mcall-linux: -mno-eabi }     %{mcall-netbsd: -mno-eabi }     %{mcall-openbsd: -mno-eabi }}} %{msdata: -msdata=default} %{mno-sdata: -msdata=none} %{!mbss-plt: %{!msecure-plt: %(cc1_secure_plt_default)}} %{profile: -p} %(cc1_os_netbsd)

*cc1_options:
%{pg:%{fomit-frame-pointer:%e-pg and -fomit-frame-pointer are incompatible}} %{!iplugindir*:%{fplugin*:%:find-plugindir()}} %1 %{!Q:-quiet} %{!dumpbase:-dumpbase %B} %{d*} %{m*} %{aux-info*} %{fcompare-debug-second:%:compare-debug-auxbase-opt(%b)}  %{!fcompare-debug-second:%{c|S:%{o*:-auxbase-strip %*}%{!o*:-auxbase %b}}}%{!c:%{!S:-auxbase %b}}  %{g*} %{O*} %{W*&pedantic*} %{w} %{std*&ansi&trigraphs} %{v:-version} %{pg:-p} %{p} %{f*} %{undef} %{Qn:-fno-ident} %{Qy:} %{-help:--help} %{-target-help:--target-help} %{-version:--version} %{-help=*:--help=%*} %{!fsyntax-only:%{S:%W{o*}%{!o*:-o %b.s}}} %{fsyntax-only:-o %j} %{-param*} %{coverage:-fprofile-arcs -ftest-coverage}

*cc1plus:
%{cxx-isystem}

*link_gcc_c_sequence:
%G %L %G

*link_ssp:
%{fstack-protector|fstack-protector-all|fstack-protector-strong|fstack-protector-explicit:}

*endfile:
%{!shared:                       %{!pie:crtend%O%s}              %{pie:crtendS%O%s}}            %{shared:crtendS%O%s}           %:if-exists(crtn%O%s)

*link:
--eh-frame-hdr %{!msdata=none:%{G*}} %{msdata=none:-G0}    %(netbsd_link_spec)

*lib:
%{pthread:			     %{!p:			       %{!pg:-lpthread}}	     %{p:-lpthread_p}		     %{pg:-lpthread_p}}		   %{posix:			     %{!p:			       %{!pg:-lposix}}		     %{p:-lposix_p}		     %{pg:-lposix_p}}		   %{shared:-lc}		   %{!shared:			     %{!symbolic:		       %{!p:				 %{!pg:-lc}}		       %{p:-lc_p}		       %{pg:-lc_p}}}

*link_gomp:


*libgcc:
%{static|static-libgcc:-lgcc}%{!static:%{!static-libgcc:--as-needed -lgcc_s --no-as-needed -lgcc}}

*startfile:
%{!shared:			     %{pg:gcrt0%O%s}		     %{!pg:			       %{p:gcrt0%O%s}		       %{!p:crt0%O%s}}}		   %:if-exists(crti%O%s)	   %{static:%:if-exists-else(crtbeginT%O%s crtbegin%O%s)}    %{!static:                        %{!shared:                        %{!pie:crtbegin%O%s}            %{pie:crtbeginS%O%s}}         %{shared:crtbeginS%O%s}}

*cross_compile:
1

*version:
6.4.0

*multilib:
. ;

*multilib_defaults:
mbig mcall-sysv

*multilib_extra:


*multilib_matches:


*multilib_exclusions:


*multilib_options:


*multilib_reuse:


*linker:
collect2

*linker_plugin_file:


*lto_wrapper:


*lto_gcc:


*post_link:


*link_libgcc:
%D

*md_exec_prefix:


*md_startfile_prefix:


*md_startfile_prefix_1:


*startfile_prefix_spec:


*sysroot_spec:
--sysroot=%R

*sysroot_suffix_spec:


*sysroot_hdrs_suffix_spec:


*self_spec:


*cpp_default:


*asm_cpu:
%{!mcpu*:   %{mpowerpc64*: -mppc64}   %{!mpowerpc64*: %(asm_default)}} %{mcpu=native: %(asm_cpu_native)} %{mcpu=cell: -mcell} %{mcpu=power3: -mppc64} %{mcpu=power4: -mpower4} %{mcpu=power5: %(asm_cpu_power5)} %{mcpu=power5+: %(asm_cpu_power5)} %{mcpu=power6: %(asm_cpu_power6) -maltivec} %{mcpu=power6x: %(asm_cpu_power6) -maltivec} %{mcpu=power7: %(asm_cpu_power7)} %{mcpu=power8: %(asm_cpu_power8)} %{mcpu=power9: %(asm_cpu_power9)} %{mcpu=a2: -ma2} %{mcpu=powerpc: -mppc} %{mcpu=powerpc64le: %(asm_cpu_power8)} %{mcpu=rs64a: -mppc64} %{mcpu=401: -mppc} %{mcpu=403: -m403} %{mcpu=405: -m405} %{mcpu=405fp: -m405} %{mcpu=440: -m440} %{mcpu=440fp: -m440} %{mcpu=464: -m440} %{mcpu=464fp: -m440} %{mcpu=476: %(asm_cpu_476)} %{mcpu=476fp: %(asm_cpu_476)} %{mcpu=505: -mppc} %{mcpu=601: -m601} %{mcpu=602: -mppc} %{mcpu=603: -mppc} %{mcpu=603e: -mppc} %{mcpu=ec603e: -mppc} %{mcpu=604: -mppc} %{mcpu=604e: -mppc} %{mcpu=620: -mppc64} %{mcpu=630: -mppc64} %{mcpu=740: -mppc} %{mcpu=750: -mppc} %{mcpu=G3: -mppc} %{mcpu=7400: -mppc -maltivec} %{mcpu=7450: -mppc -maltivec} %{mcpu=G4: -mppc -maltivec} %{mcpu=801: -mppc} %{mcpu=821: -mppc} %{mcpu=823: -mppc} %{mcpu=860: -mppc} %{mcpu=970: -mpower4 -maltivec} %{mcpu=G5: -mpower4 -maltivec} %{mcpu=8540: -me500} %{mcpu=8548: -me500} %{mcpu=e300c2: -me300} %{mcpu=e300c3: -me300} %{mcpu=e500mc: -me500mc} %{mcpu=e500mc64: -me500mc64} %{mcpu=e5500: -me5500} %{mcpu=e6500: -me6500} %{maltivec: -maltivec} %{mvsx: -mvsx %{!maltivec: -maltivec} %{!mcpu*: %(asm_cpu_power7)}} %{mpower8-vector|mcrypto|mdirect-move|mhtm: %{!mcpu*: %(asm_cpu_power8)}} -many

*asm_cpu_native:
%(asm_default)

*asm_default:
-mppc

*cc1_cpu:


*asm_cpu_power5:
-mpower5

*asm_cpu_power6:
-mpower6 -maltivec

*asm_cpu_power7:
-mpower7

*asm_cpu_power8:
-mpower8

*asm_cpu_power9:
-mpower9

*asm_cpu_476:
-m476

*cc1_secure_plt_default:
-msecure-plt

*netbsd_link_ld_elf_so:
%{!dynamic-linker:-dynamic-linker /usr/libexec/ld.elf_so}

*netbsd_cpp_spec:
%{posix:-D_POSIX_SOURCE}    %{pthread:-D_REENTRANT -D_PTHREADS}

*netbsd_link_spec:
%{assert*} %{R*} %{rpath*}    %{shared:-shared}    %{symbolic:-Bsymbolic}    %{!shared:      -dc -dp      %{!nostdlib:        %{!r: 	 %{!e*:-e %(netbsd_entry_point)}}}      %{!static:        %{rdynamic:-export-dynamic}        %(netbsd_link_ld_elf_so)}      %{static:-static        %{pie: --no-dynamic-linker}}}    %{!shared:%{!nostdlib:%{!nodefaultlibs:     %{%:sanitize(address): -lasan }      %{%:sanitize(undefined): -lubsan}}}}

*netbsd_entry_point:
_start

*netbsd_endfile_spec:
%{!shared:                       %{!pie:crtend%O%s}              %{pie:crtendS%O%s}}            %{shared:crtendS%O%s}           %:if-exists(crtn%O%s)

*link_command:
%{!fsyntax-only:%{!c:%{!M:%{!MM:%{!E:%{!S:    %(linker) %{!fno-use-linker-plugin:%{!fno-lto:     -plugin %(linker_plugin_file)     -plugin-opt=%(lto_wrapper)     -plugin-opt=-fresolution=%u.res     %{!nostdlib:%{!nodefaultlibs:%:pass-through-libs(%(link_gcc_c_sequence))}}     }}%{flto|flto=*:%<fcompare-debug*}     %{flto} %{fno-lto} %{flto=*} %l %{no-pie:} %{pie:-pie} %{fuse-ld=*:-fuse-ld=%*}  %{gz*:%e-gz is not supported in this configuration} %X %{o*} %{e*} %{N} %{n} %{r}    %{s} %{t} %{u*} %{z} %{Z} %{!nostdlib:%{!nostartfiles:%S}}     %{static:} %{L*} %(mfwrap) %(link_libgcc) %{!nostdlib:%{fvtable-verify=std: -lvtv -u_vtable_map_vars_start -u_vtable_map_vars_end}    %{fvtable-verify=preinit: -lvtv -u_vtable_map_vars_start -u_vtable_map_vars_end}} %{!shared:%{!nostdlib:%{!nodefaultlibs:%{%:sanitize(address):}     %{%:sanitize(thread):}     %{%:sanitize(leak):}}}} %o      %{fopenacc|fopenmp|%:gt(%{ftree-parallelize-loops=*:%*} 1):	%:include(libgomp.spec)%(link_gomp)}    %{fcilkplus:%:include(libcilkrts.spec)%(link_cilkrts)}    %{fgnu-tm:%:include(libitm.spec)%(link_itm)}    %(mflib)  %{fsplit-stack: --wrap=pthread_create}    %{fprofile-arcs|fprofile-generate*|coverage:-lgcov} %{!shared:%{!nostdlib:%{!nodefaultlibs:%{%:sanitize(address):%{static-libasan:-Bstatic} -lasan %{static-libasan:-Bdynamic} %{static-libasan:%:include(libsanitizer.spec)%(link_libasan)}    %{static:%ecannot specify -static with -fsanitize=address}}    %{%:sanitize(thread):%{static-libtsan:-Bstatic} -ltsan %{static-libtsan:-Bdynamic} %{static-libtsan:%:include(libsanitizer.spec)%(link_libtsan)}    %{static:%ecannot specify -static with -fsanitize=thread}}    %{%:sanitize(undefined):%{static-libubsan:-Bstatic} -lubsan %{static-libubsan:-Bdynamic} %{static-libubsan:%:include(libsanitizer.spec)%(link_libubsan)}}    %{%:sanitize(leak):%{static-liblsan:-Bstatic} -llsan %{static-liblsan:-Bdynamic} %{static-liblsan:%:include(libsanitizer.spec)%(link_liblsan)}}}}}     %{!nostdlib:%{!nodefaultlibs:%(link_ssp) %(link_gcc_c_sequence)}}    %{!nostdlib:%{!nostartfiles:%E}} %{T*}  
%(post_link) }}}}}}

